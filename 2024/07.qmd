---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
options(scipen = 999)
```


## Part 1

```{r}
input <- read_lines("190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20")

input <- read_lines("input/07")


left2right <- function(ops, nums, res) {
  result <- nums[1]
  for (i in seq_along(ops)) {
    result <- eval(parse(text = paste(result, ops[i], nums[i + 1])))
    if (result > res) reurn(Inf)
  }
  result
}

generate_computations <- function(vec, res) {
  expand.grid(rep(list(c("*", "+")), length(vec) - 1L)) |> 
    as.matrix() |> 
    asplit(MARGIN = 1) |> # split into list of row vectors
    map_dbl(\(x) left2right(x, vec, res))
}

tibble(x = input) |> 
  separate_wider_delim(x, names = c("res", "test"), delim = ":") |> 
  rowid_to_column(var = "id") |> 
  mutate(test_vec = map(test, \(x)  str_trim(x, side = "left") |> 
                          str_split_1(pattern = ' ')),
         combi = map2(test_vec, res, generate_computations)) |> 
  unnest(combi) |> 
  summarise(calib = any(res == combi), .by = c(id, res)) |> 
  filter(calib) |> 
  summarise(sum(as.numeric(res))) -> p1
p1

```

## Part 2

```{r}
vec <- c(6, 8, 6, 15)
ops <- c( "*", "#", "+")
ops <- c( "*", "#", "+", "#")

left2right2 <- function(ops, nums) {
  result <- nums[1]
  for (i in seq_along(ops)) {
    #message(nums[i], " ", ops[i], " ", nums[i + 1], " ", result)
    if (ops[i] == "#") {
      result <- paste0(result, nums[i + 1], collapse = '') |> as.numeric()
    }
    result <- eval(parse(text = paste(result, ops[i], nums[i + 1])))
  }
  result
}


generate_computations2 <- function(vec) {
  expand.grid(rep(list(c("*", "+", "#")), length(vec) - 1L)) |> 
    as.matrix() |> 
    asplit(MARGIN = 1) |> # split into list of row vectors
    map_dbl(\(x) left2right2(x, vec))
}

left2right2(c("*", "#", "*"), vec)



tibble(x = input) |> 
  separate_wider_delim(x, names = c("res", "test"), delim = ":") |> 
  rowid_to_column(var = "id") |> 
  mutate(test_vec = map(test, \(x)  str_trim(x, side = "left") |> 
                          str_split_1(pattern = ' ')),
         combi = map(test_vec, generate_computations2)) |> 
  unnest(combi) |> 
  summarise(calib = any(res == combi), .by = c(id, res)) |> 
  filter(calib) |> 
  summarise(sum(as.numeric(res))) -> p2
p2
```

