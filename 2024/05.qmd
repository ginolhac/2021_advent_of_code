---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```


## Part 1


```{r}
extract_midpoint <- function(x) {
  str_split_1(x, ',') |> 
    as.integer() -> x_vec
  x_vec[median(seq_along(x_vec))]
}


read_lines("input/05") |> 
  str_subset('\\|') -> page_order

read_lines("input/05") |> 
  str_subset('\\|', negate = TRUE) |> 
  str_subset('^$', negate = TRUE) -> updates

map_lgl(updates, \(x) {
  str_split_1(x, ',') |> 
    combn(2, simplify = FALSE) |> 
    map_chr(paste, collapse = "|") -> up_pairs
  all(up_pairs %in% page_order)
}) -> correct_updates

updates[correct_updates] |> 
  map_int(extract_midpoint) |> 
  sum()
```


## Part 2

"75,97,47,61,53" "75|97"
"61,13,29"  "13|29"
"97,13,75,29,47"   "13|75" "13|29" "13|47" "29|47"

```{r}
#system("ulimit -s 16384")
options(expressions = 500000)
reorder_update <- function(vec) {
  vec <- str_split_1(vec, ',')
  vec |> 
    combn(2, simplify = FALSE) |> 
    map_chr(paste, collapse = "|") -> up_pairs
  # end recursion
  if (all(up_pairs %in% page_order)) return(paste(vec, collapse = ','))
  # offending order
  offender <- str_split_1(up_pairs[!up_pairs %in% page_order][1], '\\|')
  idx1 <- which(vec == offender[1])
  idx2 <- which(vec == offender[2])
  vec[idx1] <- offender[2]
  vec[idx2] <- offender[1]
  reorder_update(paste(vec, collapse = ','))
}

#vec <- "97,13,75,29,47"
#reorder_update(vec)
library(tictoc)
tic()
map(updates[!correct_updates], reorder_update, .progress = TRUE) |> 
  map_int(extract_midpoint) |> 
  sum()
toc()
```



failed

``` r

  aft <- if_else(which(vec == offender[2]) == length(vec), 
                 length(vec),
                 which(vec == offender[2]) - 1L)
  fct_inorder(vec) |> 
    fct_relevel(offender[1], after = aft) |> 
    levels() |> 
    paste(collapse = ',') -> x
```
