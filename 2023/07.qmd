---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

## Input

```{r}
#| label: readin-input

read_lines(
"32T3K 765
T55J5 684
KK677 28
KTJJT 220
QQQJA 483") -> input
input <- read_lines("input/07")
```


## Part 1

```{r}
#| label: helpers

items <- c("T", "J", "Q", "K", "A", "9", "8", "7", "6", "5", "4", "3", "2")

convert_cards <- function(figures) {
  case_match(figures,
    "T" ~ "10",
    "J" ~ "11",
    "Q" ~ "12",
    "K" ~ "13",
    "A" ~ "14",
    "9" ~ "9",
    "8" ~ "8",
    "7" ~ "7",
    "6" ~ "6",
    "5" ~ "5",
    "4" ~ "4",
    "3" ~ "3",
    "2" ~ "2",
    .ptype = character(),
    .default = NA
  )
}

count_cards <- function(cards) {
  cts <- str_count(cards, items)
  names(cts) <- convert_cards(items)
  cts
}

scoring <- function(counts, part2 = FALSE) {
  # Five of a kind
  if (any(counts %in% 5)) {
    #message("Five ", names(counts)[which(counts %in% 5)])
    return(50)
  }
  # Four of a kind
  if (any(counts %in% 4)) {
    #message("Four ", names(counts)[which(counts %in% 4)])
    if (part2) {
      # if we have a joker, can be a five of a kind
      if (counts["11"] == 1 | counts["11"] == 4) return(50)
    }
    return(40)
  }
  # Full house
  if (any(counts %in% 3) & any(counts %in% 2)) {
     #message("Full house ", names(counts)[which(counts %in% 3)])
    if (part2) {
      # if we have a joker, can be a four of a kind
      if (counts["11"] == 1) return(40)
      # if we have 2 jokers, can be a five
      if (counts["11"] == 2) return(50)
    }
    return(30)
  }
  # Three of a kind
  if (any(counts %in% 3)) {
    #message("Three ", names(counts)[which(counts %in% 3)])
    if (part2) {
      # if we have a joker, can be a four of a kind
      if (counts["11"] == 1) return(40)
      # if we have 3 joker, can be also four of a kind
      if (counts["11"] == 3) return(40)
      # if we have 2 jokers, can be a five
      if (counts["11"] == 2) return(50)
    }
    return(20)
  }
  # Two pairs
  if (sum(counts %in% 2) == 2) {
    #message("Two pairs ", names(counts)[which(counts %in% 2)])
    if (part2) {
      # if we have a joker, can be a full house
      if (counts["11"] == 1) return(30)
      # if we have 2 jokers, can be a four
      if (counts["11"] == 2) return(40)
    }
    return(10)
  }
  # One pair
  if (sum(counts %in% 2) == 1) {
    #message(counts, " One pair ", names(counts)[which(counts %in% 2)])
    if (part2) {
      # if we have a joker, can be a three of a kind
      if (counts["11"] == 1  & sum(counts) > 2) return(20)
      # # if we have 2 jokers, can be a three also
      if (counts["11"] == 2) return(20)
      # # if we have 2 jokers, can be a five
      # if (counts["11"] == 3) return(50)
    }
    return(5)
  }
  # High card
  if (part2) {
   # if we have a joker, can be a pair
      if (counts["11"] == 1) return(5)
  }
  0
}

```


```{r}
#| label: part1
tibble(x = input) |> 
  separate(x, into = c("hands", "bid"), sep = " ") |> 
  mutate(chands = map(hands, count_cards),
         scores = map_int(chands, scoring),
         rank =  dense_rank(scores)) |> 
  # must rank the ties now
  nest(.by = rank) |> 
  mutate(rank2 = map2(rank, data, \(x, y) solve_ties(rank = x, tib = y))) |> 
  unnest(c(rank2, data)) |> 
  mutate(rank3 = dense_rank(rank2),
         winnings = as.numeric(bid) * rank3) |> 
  summarise(total = sum(winnings))

```

[Tanguy](https://github.com/TractorTom) smart solution to use lexicographic ordering

```{r}
#| label: part1-tanguy
tibble(x = input) |> 
  separate(x, into = c("hands", "bid"), sep = " ") |> 
  mutate(chands = map(hands, count_cards),
         hands2 = str_replace_all(hands, c("T" = "B", "A" = "Z", "K" = "W")),
         scores = map_int(chands, scoring),
         rank =  dense_rank(scores)) |> 
  arrange(rank, hands2) |> 
  mutate(rank2 = row_number(),
         winnings = as.numeric(bid) * rank2) |> 
  select(-chands, -scores) |> 
  summarise(total = sum(winnings))
  
```

248559379

## Part 2: Jokers



```{r}
#| label: part2

tibble(x = input) |> 
  separate(x, into = c("hands", "bid"), sep = " ") |> 
  mutate(chands = map(hands, count_cards),
         hands2 = str_replace_all(hands, c("J" = "1", "T" = "B", "A" = "Z", "K" = "W")),
         scores = map_int(chands, scoring, part2 = TRUE),
         rank =  dense_rank(scores)) |> 
  arrange(rank, hands2) |>
  mutate(rank2 = row_number(),
         winnings = as.numeric(bid) * rank2) |> 
  select(-chands, -scores) |> 
  summarise(total = sum(winnings))

```

249631254


