---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

## Input

```{r}
#| label: readin-input

read_lines(
"#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#

##.#.##
#.##...
.######
##....#
#.##.#.
.#.####
.#.####
#.##.#.
##....#
.######
#.##..#
##.#.##
..###..
..###..
##.#.##
#.##..#
.######

.####....#..##.##
..########..####.
.#..##..#..####..
#.#..#..###...###
..#...##.#..#.##.
###.#.##.###..##.
....###.#..####.#
....###.#..####.#
###.#.##.###..##.
..#...##.#..#.##.
#.#..#..###...###
.#..##..#..####..
..########..#.##.
.####....#..##.##
.####....#..##.##") -> input


```

Split input by blank empty lines
```{r}
input <- read_lines("input/13")
# from https://stackoverflow.com/a/50345309/1395352
split_vec <- function(vec, sep = 0) {
  is.sep <- vec == sep
  split(vec[!is.sep], cumsum(is.sep)[!is.sep])
}

splitted_input <- split_vec(input, sep = "")
```


## Part 1

Binarized the input and helpers

```{r}
conv2matrix <- function(grid) {
  grid |> 
    str_replace_all(c("\\." = "0", "#" = "1")) |> 
    tibble(x = _) |> 
    adventdrob::grid_matrix(var = x)
}

is_mirrored <- function(mat, i, margin, part2 = FALSE) {
  margin <- match.arg(margin, c("rows", "cols"))
  #message("i ", i, " end ", (i * 2):(i + 1))
  if (margin == "rows") {
    # tolerance of 1 part 2
    goal <- ifelse(part2, length(mat[seq_len(i), ]) - 1, length(mat[seq_len(i), ]))
    sum(mat[seq_len(i), ] == mat[(i * 2):(i + 1), ]) == goal
  } else {
    goal <- ifelse(part2, length(mat[, seq_len(i)]) - 1, length(mat[, seq_len(i)]))
    sum(mat[, seq_len(i)] == mat[, (i * 2):(i + 1)]) == goal
  }
}

find_mirrors <- function(x, part2 = FALSE) {
  # column left side 
  mircols <- c(map_lgl(seq_len(floor(ncol(x) / 2)), \(i) is_mirrored(x, i, "cols", part2)),
               # column right side, flip the matrix
               map_lgl(seq_len(floor(ncol(x) / 2)), \(i) is_mirrored(x[, ncol(x):1], i, "cols", part2)) |> 
                 rev())
  # rows up side 
  mirrows <- c(map_lgl(seq_len(floor(nrow(x) / 2)), \(i) is_mirrored(x, i, "rows", part2)),
               # rows bottom side, flip the matrix
               map_lgl(seq_len(floor(nrow(x) / 2)), \(i) is_mirrored(x[nrow(x):1, ], i, "rows", part2)) |> 
                 rev())
  #message("mirror rows: ", which(mirrows == TRUE), " cols: ", which(mircols == TRUE))
  mirrows <- ifelse(length(which(mirrows == TRUE)) == 0, 0, which(mirrows == TRUE))
  mircols <- ifelse(length(which(mircols == TRUE)) == 0, 0, which(mircols == TRUE))
  100 * mirrows + mircols
}
```

## Part 1

```{r}
map(splitted_input, \(x) {
  x <- conv2matrix(x)
  find_mirros(x)
}) |> reduce(`+`)
```

## Part 2


```{r}
map(splitted_input, \(x) {
  x <- conv2matrix(x)
  find_mirrors(x, part2 = TRUE)
}) |> reduce(`+`)
```









Old crap:

```{r}

find_mirror_cols <- function(mat) {
  # pairs of cols that are identical
  expand_grid(x = seq_len(ncol(mat)), y = seq_len(ncol(mat))) |> 
    filter(x < y) |> 
    mutate(diff_cols = map2_lgl(x, y, \(x, y) all((mat[, x] - mat[, y]) == 0))) |> 
    filter(diff_cols) -> diffs 
  if (nrow(diffs) == 0) return(diffs)
  diffs |> 
    mutate(diffy = lag(y, default = max(y) + 1L) - y,
           diffx = lag(x, default = min(x) - 1L) - x) |> 
    # mirror must be contiguous
    filter((diffy + diffx) == 0 & (max(x) - min(y) == -1)) -> contiguous
  #message("contiguous: ", print(contiguous), " span: ", max(contiguous$y) - min(contiguous$x), " (over ", ncol(mat), ")")
  # should span the whole matrix -1
  if (nrow(contiguous) == 0 |  (max(contiguous$y) - min(contiguous$x)) < ncol(mat) - 2) return(tibble())
  contiguous |>  
    # valid if at least one of the column is one of border
    filter((min(x) == 1 | max(y) == ncol(mat)))
  # if we have cols, return min(y) otherwise empty test the rows
}


find_mirror_rows <- function(mat) {
  # pairs of rows that are identical
  expand_grid(x = seq_len(nrow(mat)), y = seq_len(nrow(mat))) |> 
    filter(x < y) |> 
    mutate(diff_rows = map2_lgl(x, y, \(x, y) all((mat[x, ] - mat[y, ]) == 0))) |> 
    filter(diff_rows) -> diffs 
  if (nrow(diffs) == 0) return(diffs)
  diffs |>  
    mutate(diffy = lag(y, default = max(y) + 1L) - y,
           diffx = lag(x, default = min(x) - 1L) - x) |> 
    # mirror must be contiguous
    filter((diffy + diffx) == 0 & (max(x) - min(y) == -1)) -> contiguous
  #message("contiguous: ", print(contiguous), " span: ", max(contiguous$y) - min(contiguous$x), " (over ", nrow(mat), ")")
  if (nrow(contiguous) == 0 | (max(contiguous$y) - min(contiguous$x)) < nrow(mat) - 2) return(tibble())
  contiguous |> 
    # valid if at least one of the column is one of border
    filter((min(x) == 1 | max(y) == nrow(mat)))
}
```

