---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

## Input

```{r}
read_lines(
"O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....") -> input
input <- read_lines("input/14")
input |> 
 str_replace_all(c("\\." = "0", "#" = "1", "O" = 2)) |> 
    tibble(x = _) |> 
    adventdrob::grid_matrix(var = x) -> mat
```

Main process, shift by columns

```{r}

rotate_90d_right <- function(mat) {
  # transpose then flip
  m <- t(mat)
  m[, ncol(m):1]
}


shift_mirrors <- function(vec) {

  # pre-fill res vector with solid rock
  res <- vector(mode = "integer", length = length(vec))
  res[which(vec == 1)] <- 1
  
  # no solid rocks, cluster north
  if (length(which(vec == 1)) == 0) {
    res[seq_along(which(vec == 2))] <- 2
    return(res)
  }
  last_i <- 1
  # split vector by solid rock
  if (which(vec == 1)[length(which(vec == 1))] < length(vec)) {
    # add last part if rock is not ending vec
    rock_pos <- c(which(vec == 1), length(vec))
    # edge case, 99 is rock but 100 is mirror, no shift but must be reported
    if ((which(vec == 1)[length(which(vec == 1))] == (length(vec) - 1)) & vec[length(vec)] == 2) {
      res[length(vec)] <- 2
    }
  } else {
    rock_pos <- which(vec == 1)
  }
  for (i in rock_pos) {
    # if rock is starting nothing to do
    if (i == 1) {
      last_i <- i + 1
      next
    }
    # no space between rocks, nothing to shift
    if (length(last_i:i) == 1) {
      last_i <- i + 1
      next
    }
    # how many mirrors to move north
    nb_mir <- length(which(vec[last_i:i] == 2))
    #message("lasti ", last_i, " i ", i, " mirros: ", nb_mir)
    if (nb_mir > 0) res[last_i:(nb_mir + last_i - 1)] <- 2
    last_i <- i + 1
  }
  res
}




moved <- apply(mat, 2, shift_mirrors)

```

Counting points

```{r}
(apply(moved, 1, \(x) length(which(x == 2))) * nrow(moved):1) |> reduce(`+`)
```

105621 too low. Issue with columns 29, 42 thanks to Tanguy solution (105623)


## Part 2


```{r}
cycle_shift <- function(mat, round = 1, part2 = FALSE) {
  mat |> 
    # North
    apply(MARGIN = 2, FUN = shift_mirrors) |> 
    # East
    rotate_90d_right() |> 
    apply(MARGIN = 2, FUN = shift_mirrors) |> 
    # South
    rotate_90d_right() |> 
    apply(MARGIN = 2, FUN = shift_mirrors) |> 
    # West
    rotate_90d_right() |> 
    apply(MARGIN = 2, FUN = shift_mirrors) |> 
    rotate_90d_right()
}
# 1 cycle
cycle_shift(mat)
```



```{r}

library(tictoc)
tic()

aim <- 1e5
current_load <- vector(mode = "integer", length = aim)
ongoing <- mat
for (i in seq_len(aim)) {
  if (i %% 100 == 0) message("treating iteration: ", i, " (", round((i / aim) * 100, 2),"%)")
  ongoing <- cycle_shift(ongoing)
  current_load[i] <- (apply(ongoing, 1, \(x) length(which(x == 2))) * nrow(ongoing):1) |> 
    reduce(`+`)
}
toc()
#saveRDS(current_load, "day14_current_load1e5.rds")

```

9 seconds for 1e4 and example
202.738 seconds for 1e4 and real input
2022.078 seconds for 1e5 and real input

```{r}
#current_load <- readRDS("day14_current_load1e5.rds")

library(gganimate)
tibble(y = current_load,
       cycle = seq_len(aim)) |> 
  head(300) |> 
  ggplot(aes(cycle, y)) +
  geom_line() +
  #transition_reveal(cycle) +
  #geom_hline(yintercept = 98029, colour = "red", linetype = "dashed") +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(x = "Cycle (4 rotations)",
       y = "Current load",
       title = "AoC day14, part2",
       subtitle = "Cycle: {frame_along}")
anim_save("day14_part2_input.gif")

```


```{r}
tibble(y = current_load,
       cycle = seq_len(aim)) |> 
  # before 150 current load is instable
  filter(cycle > 250, cycle < 100000) |> 
  nest(.by = y) |> 
  mutate(periodicity = map(data, \(x) {
    mutate(x, diff = lead(cycle) - cycle) |> 
      pull(diff) |> 
      na.omit() |> 
      unique()
    }),
    n = map_int(periodicity, length)) |>
  filter(n == 1) |> 
  mutate(periodicity = map_int(periodicity, pluck))
```

only 20 load are possible, and 4 have 2 or 3 periodicity so discarding those.

We end up with a periodicity of **26**.

```{r}
tic()
expected <- 0
for (i in seq(1e9, 1e4, -26)) {
  if (i < 1e5 & i > 1e4) {
    expected <- c(expected, i)
  }
  if (i %% 1e5 == 0) message(" looking for compatible cycles ", i)
}
toc() # 15 sec


tibble(y = current_load,
       cycle = seq_len(aim)) |> 
  filter(cycle %in% expected) |> 
  distinct(y)
```



98029


```{r}
tibble(y = current_load,
       cycle = seq_len(aim)) |> 
  filter(cycle > 950, cycle < 1010) |> 
   ggplot(aes(cycle, y)) +
  geom_line() +
  geom_hline(yintercept = 98029, colour = "red", linetype = "dashed") 
```



## Plotting part 1


```{r}
library(gganimate)
bind_rows(
  tibble(x = 1:nrow(moved),
         y = apply(moved, 1, \(x) which(x == 2)),
         type = "mirror",
         t = 2),
  tibble(x = 1:nrow(moved),
         y = apply(moved, 1, \(x) which(x == 1)),
         type = "rocks",
         t = 2),
  tibble(x = 1:nrow(mat),
         y = apply(mat, 1, \(x) which(x == 2)),
         type = "mirror",
         t = 1),
  tibble(x = 1:nrow(mat),
         y = apply(mat, 1, \(x) which(x == 1)),
         type = "rocks",
         t = 1)) |> 
  mutate(t = factor(t, labels = c("intial", "shifted North"))) |> 
  unnest(y) |> 
  ggplot(aes(x = factor(y), y = -x, shape = type, colour = type)) +
  geom_point(size = 6) +
  transition_states(t) +
  scale_colour_manual(values = c("grey", "black")) +
  scale_shape_manual(values = c(9, 15)) +
  theme_void() +
  theme(legend.position = "none",
        panel.grid.major.x = element_line(colour = "grey80"),
        panel.grid.minor.x = element_line(colour = "grey80")) +
  labs(title = "{closest_state}") -> miranim
animate(miranim)
anim_save("day14.gif")
 # facet_wrap(vars(t), ncol = 1)
```
