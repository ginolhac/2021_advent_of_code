---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

## Input

```{r}
read_lines(
"O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....") -> input
#input <- read_lines("input/14")
input |> 
 str_replace_all(c("\\." = "0", "#" = "1", "O" = 2)) |> 
    tibble(x = _) |> 
    adventdrob::grid_matrix(var = x) -> mat
```

Main process, shift by columns

```{r}

shift_mirrors <- function(vec) {
  # pre-fill res vector with solid rock
  res <- vector(mode = "integer", length = length(vec))
  res[which(vec == 1)] <- 1
  
  # no solid rocks, cluster north
  if (length(which(vec == 1)) == 0) {
    res[seq_along(which(vec == 2))] <- 2
    return(res)
  }
  last_i <- 1
  # split vector by solid rock
  if (which(vec == 1)[length(which(vec == 1))] < length(vec)) {
    # add last part if rock is not ending vec
    rock_pos <- c(which(vec == 1), length(vec))
  } else {
    rock_pos <- which(vec == 1)
  }
  for (i in rock_pos) {
    # if rock is starting nothing to do
    if (i == 1) {
      last_i <- i + 1
      next
    }
    # no space between rocks, nothing to shift
    if (length(last_i:i) == 1) {
      last_i <- i + 1
      next
    }
    # how many mirrors to move north
    nb_mir <- length(which(vec[last_i:i] == 2))
    #message("lasti ", last_i, " i ", i, " mirros: ", nb_mir)
    if (nb_mir > 0) res[last_i:(nb_mir + last_i - 1)] <- 2
    last_i <- i + 1
  }
  res
}
mat

moved <- apply(mat, 2, shift_mirrors)

```
counting points
```{r}
(apply(moved, 1, \(x) length(which(x == 2))) * nrow(moved):1) |> reduce(`+`)
```

105621 too low


## plotting


```{r}
bind_rows(
  tibble(x = 1:nrow(moved),
         y = apply(moved, 1, \(x) which(x == 2)),
         type = "mirror",
         t = 2),
  tibble(x = 1:nrow(moved),
         y = apply(moved, 1, \(x) which(x == 1)),
         type = "rocks",
         t = 2),
  tibble(x = 1:nrow(mat),
         y = apply(mat, 1, \(x) which(x == 2)),
         type = "mirror",
         t = 1),
  tibble(x = 1:nrow(mat),
         y = apply(mat, 1, \(x) which(x == 1)),
         type = "rocks",
         t = 1)) |> 
  unnest(y) |> 
  ggplot(aes(x, -y, shape = type, colour = type)) +
  geom_point(size = 5) +
  theme_classic() +
  theme(plot.background = element_rect(colour = "black", linewidth = 1)) +
  facet_wrap(vars(t))
```



