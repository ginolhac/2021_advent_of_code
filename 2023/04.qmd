---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

## Part 1


```{r}
#| label: part1

test <- read_lines(
"Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11")

tibble(x = read_lines("input/04")) |> 
  mutate(card_id = str_extract(x, pattern = "(\\d+):", group = 1),
         winning = str_extract(x, pattern = ": ([\\d\\s]*)", group = 1) |> 
           map( \(win) str_split_1(win, " ") |> as.numeric()),
         own = str_extract(x, pattern = "\\| ([\\d\\s]*)", group = 1) |> 
           map( \(o) str_split_1(o, " ") |> as.numeric())) |> 
  mutate(wins = map2_int(winning, own, \(w, o) intersect(w, o) |> na.omit() |> length()),
         score = map_int(wins, \(xx) {
           if (xx == 0L) return(0L)
           reduce(seq_len(xx), ~ .x *2)
         })
  ) -> cards
summarise(cards, total = sum(score))
  
```

## Part 2

```{r}
# keep track of copies
stack <- vector(mode = "integer", length = nrow(cards))

#scores <- c(4, 2, 2, 1, 0, 0)
scores <- cards$wins

for (idx in seq_along(scores)) {
  if (scores[idx] == 0L) {
    # don't create copy, just add the original
     stack[idx] <- stack[idx] + 1L
  }
  else {
    #message("cards:", idx, " wins:", scores[idx])
    #message("scratchcards ", scratchcards, " stack:", stack)
    end <- min(idx + scores[idx], length(stack))
    # add the original card
    stack[idx] <- stack[idx] + 1L
    # create copies
    for (copy in seq(idx + 1, end)) {
      stack[copy] <- stack[copy] + 1L
      #message("copy: ", copy, " ", stack[copy])
    }
    # add stack for copies
    if (stack[idx] > 1L) {
      for (new in seq_len(stack[idx] - 1L)) {
       # message("new: ", new, " stack(new): ", stack[idx])
        for (i in seq(idx + 1, end)) {
          #message("i: ", i, " stack: ", stack[i])
          stack[i] <- stack[i] + 1L
        }
      }
    } #else message("stack empty, card: ", idx)
  }
  #message("end (idx: ", idx, ") stack is: ", stack, "\n-------------------")
  if(idx %% 20 == 0) message("Treating card: ", idx)
}

sum(stack)
```

