---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(IRanges)
```

## Part 1

```{r}
#| label: readin-input
read_lines(
"seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4") -> input
input <- read_lines("input/05")
```

```{r}
#| label: helpers
parse_map <- function(.data, type) {
  paste0(.data, collapse = "\n") |> 
    str_extract(pattern = paste0(type, " map:\n([\\d\\s]*)"), group = 1) |> 
    str_split_1("\n") |> 
    str_subset("\\d+") |> 
    map(\(x) {
      rp <- str_split_1(x, " ") |> as.numeric()
      # create the correspondences with a named vector
      # index is the from, value is the destiantion
      set_names(seq(rp[1], (rp[1] + rp[3] - 1L)), 
                nm = seq(rp[2], (rp[2] + rp[3] - 1L)))
    })
}

find_correspondences <- function(query, intervals) {
  for (rg in intervals) {
    if (query >= as.numeric(names(rg)[1]) & query <= as.numeric(names(rg)[length(rg)])) {
      return(rg[as.character(query)])
    }
  }
  query
}
```

```{r}
#| label: part1
seeds <- str_subset(input, "^seeds") |> 
  str_extract(pattern = "seeds: ([\\d\\s]*)", group = 1) |> 
  str_split_1(" ") |> as.numeric()

fertilizer_types <- str_subset(input, "map") |> 
  str_extract("\\w+\\-to\\-\\w+")

fertilizer_types |> 
  set_names() |> 
  map(\(x) parse_map(input, x)) -> garden_map

seeds[2] |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`seed-to-soil`), .progress = "soil") |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`soil-to-fertilizer`), .progress = "fertilizer") |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`fertilizer-to-water`), .progress = "water") |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`water-to-light`)) |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`light-to-temperature`)) |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`temperature-to-humidity`)) |> 
  map_dbl(\(x) find_correspondences(x, garden_map$`humidity-to-location`))
  

```
si --exclusive -t 1:00:00
module load tools/Singularity
singularity shell docker://rocker/tidyverse:4.3.2



```{r}
soil <- IRanges(start = c(98, 50), width = c(2, 48), shift = c(98 - 50, 50 - 52))
soil

findOverlaps(IRanges(start = c(14, 79), width = rep.int(1, 2)), soil) |> 
  queryLength()
```
