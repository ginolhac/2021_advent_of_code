---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(adventdrob)
```

## Input

```{r}
#| label: readin-input

read_lines(
".....
.S-7.
.|.|.
.L-J.
.....") -> input
input <- read_lines("input/10")
```

```{r}
#| label: example2

read_lines(
"..F7.
.FJ|.
SJ.L7
|F--J
LJ...") -> input
```


## Plotting

plotting like https://mastodon.social/@marcaurele/111555609399299629


From Pierre-Yves Berrard, ASCII art 

```{r}
input |>
  head(100) |> 
  str_sub(end = 100L) |> 
  stringr::str_replace_all(
    c("-" = "\u2500",
      "\\|" = "\u2502",
      "F" = "\u250C",
      "J" = "\u2518",
      "7" = "\u2510",
      "L" = "\u2514",
      "S" = "o")
  ) |>
  cat(sep = "\n") |> 
  write_lines("10_ascii.txt")
```


## Part 1


```{r}
read_lines(
"...........
.S-------7.
.|F-----7|.
.||.....||.
.||.....||.
.|L-7.F-J|.
.|..|.|..|.
.L--J.L--J.
...........") -> input

read_lines(
".F----7F7F7F7F-7....
.|F--7||||||||FJ....
.||.FJ||||||||L7....
FJL7L7LJLJ||LJ.L-7..
L--J.L7...LJS7F-7L7.
....F-J..F7FJ|L7L7L7
....L7.F7||L7|.L7L7|
.....|FJLJ|FJ|F7|.LJ
....FJL-7.||.||||...
....L---J.LJ.LJLJ...") -> input
#input <- read_lines("input/10")

animat <- tibble(x = input) |> 
  grid_matrix(var = x)



for (i in seq_len(nrow(animat))) {
  for (j in seq_len(ncol(animat))) {
    if (animat[i, j] == "S") {
      message("found the animal ", i, " ", j)
      animal <- c(i, j)
      break
    }
  }
}

is_next_the_animal <- function(pos, animat, distance) {
  if (distance < 2) return(FALSE)
  # is it north?
  if ((between(pos[1] - 1, 1, nrow(animat)) && animat[pos[1] - 1, pos[2]] == "S" & animat[pos[1], pos[2]] %in% c("J", "|", "L")) |
      # is it right?
      (between(pos[2] + 1, 1, ncol(animat)) && animat[pos[1], pos[2] + 1] == "S" & animat[pos[1], pos[2]] %in% c("-", "L", "F")) |
      # is it left?
      (between(pos[2] - 1, 1, ncol(animat)) && animat[pos[1], pos[2] - 1] == "S" & animat[pos[1], pos[2]] %in% c("7", "J", "-")) |
      # is it down?
      (between(pos[1] + 1, 1, nrow(animat)) && animat[pos[1] + 1, pos[2] ] == "S" & animat[pos[1], pos[2]] %in% c("7", "|", "F"))) {
    return(TRUE)
  }
  FALSE
}

distmat <- matrix(nrow = nrow(animat), ncol = ncol(animat))

pos <- animal
distance <- 0
for (i in seq_len(14000)) {

  if (is_next_the_animal(pos, animat, distance)) {
    distmat[pos[1], pos[2]] <- distance
    message("Done!")
    break
  }
  # write the distance to the matrix
  distmat[pos[1], pos[2]] <- distance
  distance <- distance + 1
  message("pos x: ", pos[1], " y: ", pos[2], " distance ", distance)
  #message("current ", animat[pos[1], pos[2]])
  # check right
  if (between(pos[2] + 1, 1, ncol(animat)) &&  
      is.na(distmat[pos[1], pos[2] + 1]) &&
      animat[pos[1], pos[2]] %in% c("-", "L", "F", "S") && 
      animat[pos[1], pos[2] + 1] %in% c("7", "J", "-", "S")) {
    pos <- c(pos[1], pos[2] + 1)
    next
  } 
  # check left
  if (between(pos[2] - 1, 1, ncol(animat)) && 
      is.na(distmat[pos[1], pos[2] - 1]) &&
      animat[pos[1], pos[2]] %in% c("-", "7", "J", "S") && 
      animat[pos[1], pos[2] - 1] %in% c("F", "-", "L", "S")) {
    pos <- c(pos[1], pos[2] - 1)
    next
  }
  # check down
  if (between(pos[1] + 1, 1, nrow(animat)) && 
      is.na(distmat[pos[1] + 1, pos[2]]) &&
      animat[pos[1], pos[2]] %in% c("F", "|", "7", "S") && 
      animat[pos[1] + 1, pos[2]] %in% c("J", "|", "L", "S")) {
    #message("down")
    pos <- c(pos[1] + 1, pos[2])
    next
  }
  # check up
  if (between(pos[1] - 1, 1, nrow(animat)) && 
      is.na(distmat[pos[1] - 1, pos[2]]) &&
      animat[pos[1], pos[2]] %in% c("J", "|", "L", "S") && 
      animat[pos[1] - 1, pos[2]] %in% c("F", "|", "7", "S")) {
    #message("up")
    pos <- c(pos[1] - 1, pos[2])
    next
  }

}

(distance + 1) / 2
```

6823


## Part 2


```{r}
enclosed_mat <- matrix(nrow = nrow(animat), ncol = ncol(animat))


inside <- 0

for (i in seq_len(nrow(animat))) {
  for (j in seq_len(ncol(animat))) {
    if ((j + 1) <= ncol(animat) && !is.na(distmat[i, j]) && !is.na(distmat[i, j + 1])) {
      message(i, j, " on a pipe ", animat[i, j + 1])
      inside <- 1
      next
    }
    if ((j + 1) <= ncol(animat) && !is.na(distmat[i, j]) && is.na(distmat[i, j + 1]) && inside == 0) {
      message(i, j, " now inside next char is ", animat[i, j + 1])
      # cannot be enclosed if on the border
      if ((j + 1) < ncol(distmat)) {
        enclosed_mat[i, j + 1] <- animat[i, j + 1]
        inside <- 1
      }
    } else if ( j <= ncol(animat) && inside == 1 && !is.na(distmat[i, j])) {
      message(i, j, " inside but should stop  ", animat[i, j])
      inside <- 0
    }
    if ( j <= ncol(animat) && inside == 1 && is.na(distmat[i, j])) {
      message(i, j, " inside   ", animat[i, j])
      enclosed_mat[i, j] <- animat[i, j]
    } 
    message(i, j, inside)
  }
}
```




- Ascii art

```{r}
ascii_mat <- matrix(nrow = nrow(animat), ncol = ncol(animat))

# fill in only the animal pipes 

for (i in seq_len(nrow(animat))) {
  for (j in seq_len(ncol(animat))) {
    if (!is.na(distmat[i, j])) {
      ascii_mat[i, j] <- animat[i, j]
    }
  }
}


apply(ascii_mat, 1, \(x) { 
  x[is.na(x)] <- "."
  stringr::str_replace_all(x,
    c("-" = "\u2500",
      "\\|" = "\u2502",
      "F" = "\u250C",
      "J" = "\u2518",
      "7" = "\u2510",
      "L" = "\u2514",
    "\\." = "\u0020",
      "S" = "\033[41m O\033[0m")) |> paste0(collapse = "")
}) |>
  cat(sep = "\n") -> tt
  write_lines("10_ascii.txt")
```





Recursion that didn't work (C stack too close to the limit)

```{r}

options(expressions = 5e5)

distmat <- matrix(nrow = nrow(animat), ncol = ncol(animat))

serialc <- function(pos, distance) {
  if (distance > 850) {
    return()
  }
  # check that this cell in the matrix is not NA  
  if (!is.na(distmat[pos[1], pos[2]]) & distmat[pos[1], pos[2]] < distance) {
    return()
  }
  
  # write the distance to the matrix
  distmat[pos[1], pos[2]] <<- distance
  message("pos ", pos, " distance ", distance)
  message(pos[2] + 1, " current ", animat[pos[1], pos[2]])
  # check right
  if (between(pos[2] + 1, 1, ncol(animat)) &&  animat[pos[1], pos[2]] %in% c("-", "L", "F", "S") && 
      animat[pos[1], pos[2] + 1] %in% c("7", "J", "-")) {
    serialc(c(pos[1], pos[2] + 1), distance + 1)
  } 
  # check left
  if (between(pos[2] - 1, 1, ncol(animat)) && animat[pos[1], pos[2]] %in% c("-", "7", "J", "S") && 
      animat[pos[1], pos[2] - 1] %in% c("F", "-", "L")) {
    serialc(c(pos[1], pos[2] - 1), distance + 1)
  }
  # check down
  if (between(pos[1] + 1, 1, nrow(animat)) && animat[pos[1], pos[2]] %in% c("F", "|", "7", "S") && 
      animat[pos[1] + 1, pos[2]] %in% c("J", "|", "L")) {
    serialc(c(pos[1] + 1, pos[2]), distance + 1)
  }
  # check up
  if (between(pos[1] - 1, 1, nrow(animat)) && animat[pos[1], pos[2]] %in% c("J", "|", "L", "S") && 
      animat[pos[1] - 1, pos[2]] %in% c("F", "|", "7")) {
    serialc(c(pos[1] - 1, pos[2]), distance + 1)
  }
}

serialc(animal, 0)
```
