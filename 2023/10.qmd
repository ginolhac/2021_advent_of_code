---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(adventdrob)
```

## Input

```{r}
#| label: readin-input

read_lines(
".....
.S-7.
.|.|.
.L-J.
.....") -> input
input <- read_lines("input/10")
```

```{r}
#| label: example2

read_lines(
"..F7.
.FJ|.
SJ.L7
|F--J
LJ...") -> input
```


## Plotting

plotting like https://mastodon.social/@marcaurele/111555609399299629


From Pierre-Yves Berrard, ASCII art 

```{r}
input |>
  head(100) |> 
  str_sub(end = 100L) |> 
  stringr::str_replace_all(
    c("-" = "\u2500",
      "\\|" = "\u2502",
      "F" = "\u250C",
      "J" = "\u2518",
      "7" = "\u2510",
      "L" = "\u2514",
      "S" = "S")
  ) |>
  cat(sep = "\n") |> 
  write_lines("10_ascii.txt")
```


## Part 1


```{r}
input <- read_lines("input/10")

animat <- tibble(x = input) |> 
  grid_matrix(var = x)



for (i in seq_len(nrow(animat))) {
  for (j in seq_len(ncol(animat))) {
    if (animat[i, j] == "S") {
      message("found the animal ", i, " ", j)
      animal <- c(i, j)
      break
    }
  }
}
animat[animal[1], animal[2]]

distmat <- matrix(nrow = nrow(animat), ncol = ncol(animat))

pos <- animal
distance <- 0
for (i in seq_len(15000)) {
  # specific to this puzzle, we come from the left
  if (animat[pos[1], pos[2] + 1] == "S" ) {
    message("Done!")
    break
  }
  # write the distance to the matrix
  distmat[pos[1], pos[2]] <- distance
  distance <- distance + 1
  message("pos ", pos, " distance ", distance)
  message(pos[2] + 1, " current ", animat[pos[1], pos[2]])
  # check right
  if (between(pos[2] + 1, 1, ncol(animat)) &&  
      is.na(distmat[pos[1], pos[2] + 1]) &&
      animat[pos[1], pos[2]] %in% c("-", "L", "F", "S") && 
      animat[pos[1], pos[2] + 1] %in% c("7", "J", "-", "S")) {
    pos <- c(pos[1], pos[2] + 1)
    next
  } 
  # check left
  if (between(pos[2] - 1, 1, ncol(animat)) && 
      is.na(distmat[pos[1], pos[2] - 1]) &&
      animat[pos[1], pos[2]] %in% c("-", "7", "J", "S") && 
      animat[pos[1], pos[2] - 1] %in% c("F", "-", "L", "S")) {
    pos <- c(pos[1], pos[2] - 1)
    next
  }
  # check down
  if (between(pos[1] + 1, 1, nrow(animat)) && 
      is.na(distmat[pos[1] + 1, pos[2]]) &&
      animat[pos[1], pos[2]] %in% c("F", "|", "7", "S") && 
      animat[pos[1] + 1, pos[2]] %in% c("J", "|", "L", "S")) {
    message("down")
    pos <- c(pos[1] + 1, pos[2])
    next
  }
  # check up
  if (between(pos[1] - 1, 1, nrow(animat)) && 
      is.na(distmat[pos[1] - 1, pos[2]]) &&
      animat[pos[1], pos[2]] %in% c("J", "|", "L", "S") && 
      animat[pos[1] - 1, pos[2]] %in% c("F", "|", "7", "S")) {
    message("up")
    pos <- c(pos[1] - 1, pos[2])
    next
  }

}

(distance + 1) / 2
```

6823




Recursion that didn't work (C stack too close to the limit)

```{r}

options(expressions=5e5)

distmat <- matrix(nrow = nrow(animat), ncol = ncol(animat))

serialc <- function(pos, distance) {
  if (distance > 850) {
    return()
  }
  # check that this cell in the matrix is not NA  
  if (!is.na(distmat[pos[1], pos[2]]) & distmat[pos[1], pos[2]] < distance) {
    return()
  }
  
  # write the distance to the matrix
  distmat[pos[1], pos[2]] <<- distance
  message("pos ", pos, " distance ", distance)
  message(pos[2] + 1, " current ", animat[pos[1], pos[2]])
  # check right
  if (between(pos[2] + 1, 1, ncol(animat)) &&  animat[pos[1], pos[2]] %in% c("-", "L", "F", "S") && animat[pos[1], pos[2] + 1] %in% c("7", "J", "-")) {
    serialc(c(pos[1], pos[2] + 1), distance + 1)
  } 
  # check left
  if (between(pos[2] - 1, 1, ncol(animat)) && animat[pos[1], pos[2]] %in% c("-", "7", "J", "S") && animat[pos[1], pos[2] - 1] %in% c("F", "-", "L")) {
    serialc(c(pos[1], pos[2] - 1), distance + 1)
  }
  # check down
  if (between(pos[1] + 1, 1, nrow(animat)) && animat[pos[1], pos[2]] %in% c("F", "|", "7", "S") && animat[pos[1] + 1, pos[2]] %in% c("J", "|", "L")) {
    serialc(c(pos[1] + 1, pos[2]), distance + 1)
  }

  # check up
  if (between(pos[1] - 1, 1, nrow(animat)) && animat[pos[1], pos[2]] %in% c("J", "|", "L", "S") && animat[pos[1] - 1, pos[2]] %in% c("F", "|", "7")) {
    serialc(c(pos[1] - 1, pos[2]), distance + 1)
  }
}

serialc(animal, 0)
```
