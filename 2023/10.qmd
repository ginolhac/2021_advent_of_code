---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(adventdrob)
```

## Input

```{r}
#| label: readin-input

read_lines(
".....
.S-7.
.|.|.
.L-J.
.....") -> input
input <- read_lines("input/10")
```

```{r}
#| label: example2

read_lines(
"..F7.
.FJ|.
SJ.L7
|F--J
LJ...") -> input
```



## Part 1




```{r}
animat <- tibble(x = input) |> 
  grid_matrix(var = x)


for (i in seq_len(nrow(animat))) {
  for (j in seq_len(ncol(animat))) {
    if (animat[i, j] == "S") {
      message("found the animal ", i, " ", j)
      animal <- c(i, j)
      break
    }
  }
}
animat[animal[1], animal[2]]

animotion <- function(motion) {
  prev <- motion[[1]]
  cd <- motion[[2]]
  #message("prev ", prev, " [", pos, "], ", animat[cd[1], cd[2]], " farthest: ", farthest, " steps: ", steps)
  case_when(
    # if we come up and found a F, we turn right
    animat[cd[1], cd[2]] == "F" & prev == "up"    ~ list("right", c(cd[1], cd[2] + 1L)),
    # but if we come from right, we turn left and go down!
    animat[cd[1], cd[2]] == "F" & prev == "left"  ~ list("down",  c(cd[1] + 1L, cd[2])),
    animat[cd[1], cd[2]] == "|" & prev == "up"    ~ list("up",    c(cd[1] - 1L, cd[2])),
    animat[cd[1], cd[2]] == "|" & prev == "down"  ~ list("down",  c(cd[1] + 1L, cd[2])),
    animat[cd[1], cd[2]] == "-" & prev == "left"  ~ list("left",  c(cd[1], cd[2] - 1L)),
    animat[cd[1], cd[2]] == "-" & prev == "right" ~ list("right", c(cd[1], cd[2] + 1L)),
    animat[cd[1], cd[2]] == "J" & prev == "right" ~ list("up",    c(cd[1] - 1L, cd[2])),
    animat[cd[1], cd[2]] == "J" & prev == "down"  ~ list("left",  c(cd[1], cd[2] - 1L)),
    animat[cd[1], cd[2]] == "L" & prev == "down"  ~ list("right", c(cd[1], cd[2] + 1L)),
    animat[cd[1], cd[2]] == "L" & prev == "left"  ~ list("up",    c(cd[1] - 1L, cd[2])),
    animat[cd[1], cd[2]] == "7" & prev == "up"    ~ list("left",  c(cd[1], cd[2] - 1L)),
    animat[cd[1], cd[2]] == "7" & prev == "right" ~ list("down",  c(cd[1] + 1L, cd[2])),
    animat[cd[1], cd[2]] == "." ~ list("dots!"),
    animat[cd[1], cd[2]] == "S" ~ list("animal!"),
    .default = NA
  )
}

anidist <- function(anipos, current) {
  abs(anipos[1] - current[1]) + abs(anipos[2] - current[2])
}

steps <- 1L
distmax <- 0L
farthest <- 1L
# arbitrary deciding to move right
pos <- c(animal[1], animal[2] - 1L)
previous <- "left"
while (steps < 20L) {
  res <- animotion(list(previous, pos))
  previous <- res[[1]]
  pos <- res[[2]]
  steps <- steps + 1L
  # Compute distance to animal
  if (anidist(animal, pos) > distmax) {
    distmax <- anidist(animal, pos)
    farthest <- steps
  }
  if (animat[pos[1], pos[2]] == "S") break
}
message("final steps: ", steps, " farthest: ", farthest, " distmax: ", distmax)
```
right:
```
found the animal 53 101
final steps: 20 farthest: 19 distmax: 11
```

## Plotting

plotting like https://mastodon.social/@marcaurele/111555609399299629


From Pierre-Yves Berrard, ASCII art 

```{r}
input |>
  head(100) |> 
  str_sub(end = 100L) |> 
  stringr::str_replace_all(
    c("-" = "\u2500",
      "\\|" = "\u2502",
      "F" = "\u250C",
      "J" = "\u2518",
      "7" = "\u2510",
      "L" = "\u2514",
      "S" = "o")
  ) |>
  cat(sep = "\n") |> 
  write_lines("11_ascii.txt")
```


