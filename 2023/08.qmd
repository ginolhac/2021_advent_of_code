---
format: html
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(tidygraph)
library(ggraph)
```

## Input

```{r}
#| label: readin-input

read_lines(
"RL

AAA = (BBB, CCC)
BBB = (DDD, EEE)
CCC = (ZZZ, GGG)
DDD = (DDD, DDD)
EEE = (EEE, EEE)
GGG = (GGG, GGG)
ZZZ = (ZZZ, ZZZ)") -> input
input <- read_lines("input/08")
```


## Part 1

```{r}
#| label: part1

paths <- input[1] |> str_split_1("") |> rep(400) 
nodes <- str_extract(input, "^\\w+")[-c(1:2)]
left_edges <- str_extract(input, "\\(([A-Z]{3})", group = 1)[-c(1:2)]
right_edges <- str_extract(input, "\\s([A-Z]{3})\\)$", group = 1)[-c(1:2)]

# create the network
network <- vector(mode = "list", length = length(nodes))
names(network) <- nodes
for (i in seq_along(network)) {
  network[[i]] <- c(L = left_edges[i], R = right_edges[i])
}

# walk along
steps <- 0L
pos <- "AAA"
while (pos != "ZZZ") {
  steps <- steps + 1L
  message("step ", steps, " pos ", pos, " go to ", paths[steps])
  pos <- network[[pos]][[paths[steps]]]
  message("step ", steps, " pos ", pos)
}
print(steps)
```


## Visualisation of the 6 loops

```{r}
#| label: viz-network
paths <- input[1]
nodes <- str_extract(input, "^\\w+")[-c(1:2)]
left_edges <- str_extract(input, "\\(([A-Z]{3})", group = 1)[-c(1:2)]
right_edges <- str_extract(input, "\\s([A-Z]{3})\\)$", group = 1)[-c(1:2)]

tbl_graph(
  nodes = data.frame(name = nodes),
  data.frame(
    from = rep(seq_along(nodes), 2),
    to = c(match(left_edges, nodes), match(right_edges, nodes)),
    direction = rep(c("left", "right"), each = length(nodes)))
) -> haunted
haunted |> 
  ggraph( layout = 'kk') + 
  geom_edge_fan(aes(colour = direction), alpha = 0.1) + 
  geom_node_point(aes(#size = centrality_pagerank(), 
                      colour = node_is_center())) +
  geom_node_text(data = \(x) filter(x, str_detect(name, "[AZ]$")),
                 aes(label = name), repel = TRUE) +
  theme_graph()
```

## Part2

Least common multiple functions from [TractorTom](https://github.com/TractorTom/Advent-of-Code/blob/master/2023/Day08/day08.R)

Idea from SebDL

```{r}
#| label: helpers

pgcd <- function(a, b) {
  if (b == 0) {
    return(a)
  } else {
    return(pgcd(b, a %% b))
  }
}

ppcm <- function(a, b) a * b / pgcd(a, b)
```


```{r}
#| label: part2

walk_network <- function(start, end) {
  steps <- 0L
  pos <- start
  while (pos != end) {
    steps <- steps + 1L
    pos <- network[[pos]][[paths[steps]]]
  }
  steps
}
# thanks to the plot we know the pairs
astarts <- c("VBA", "DVA", "VPA", "DTA", "TVA", "AAA")
zends   <- c("DVZ", "HSZ", "GGZ", "HLZ", "XKZ", "ZZZ")
six_steps <- map2_int(astarts, zends, walk_network)
reduce(six_steps, ppcm) |> format(scientific = FALSE)
```


Useless play around with `igraph`

```{r}
library(igraph)
shortest_paths(haunted, "AAA", "ZZZ")$vpath

 
 # select the nodes having these names
selnodes <- V(haunted)[name %in% c( "AAA", "ZZZ")]
# get their network neighborhood 
selegoV <- ego(haunted, order = 1, nodes = selnodes, mode = "all", mindist = 0)

# turn the returned list of igraph.vs objects into a graph
selegoG <- induced_subgraph(haunted, unlist(selegoV))

# plot the subgraph
plot(selegoG, vertex.label = V(selegoG)$name)
```

