---
title: "04"
format: html
---


```{r}
#| label: setup
#| include: false
library(tidyverse)
library(data.table)
```

- Part One


```{r}
read_fwf("input/05_test",
         fwf_widths(c(1,1,3,1,3,1,2)),
         show_col_types = FALSE,
         n_max = 3) -> stacks_fwf

list(stacks_fwf$X2,
     stacks_fwf$X4,
     stacks_fwf$X6) -> stacks

read_table("input/05_test", skip = 4, col_names = FALSE, show_col_types = FALSE) |> 
  select(where(is.numeric)) |> 
  rename(crate = X2, from = X4, to = X6) -> motions

```


```{r}
for (i in seq_len(nrow(motions))) {
  c1max <- sum(!is.na(stacks[[motions$from[i]]]))
  lg1   <- length(stacks[[motions$from[i]]])
  dif <- lg1 - c1max
  c2max <- sum(!is.na(stacks[[motions$to[i]]])) 
  lg2   <- length(stacks[[motions$to[i]]])
  # When crate is empty, do nout pile NA
  if (c2max > 0L) {
    from_crate <- stacks[[motions$to[i]]][(lg2 - c2max + 1):lg2]
  } else {
    from_crate <- character(0)
  }
  # Destination gets pilled up
  stacks[[motions$to[i]]] <- c(rev(stacks[[motions$from[i]]][(1 + dif):(dif + motions$crate[i])]), # reverse order of origin 
                               from_crate)  
  # Origin updated, remove moved
  stacks[[motions$from[i]]][1:(dif + motions$crate[i])] <- NA
  #message(paste("mvs:", i,  "max1", c1max, "lg1", lg1, "dif", dif,  "\nmax2", c2max, "lg2", lg2))
  #print(stacks)
}

print_top_crate <- function(l) {
  # drop NA
  map(stacks, \(x) x[!is.na(x)]) |> 
    # get entry
    map_chr(\(x) x[1])
}

print_top_crate(stacks)
```




```{r}
read_csv("input/04", col_names = c("first", "second"),
         show_col_types = FALSE) |> 
  mutate(across(.fns = \(x) str_replace(x, "-", ":"))) |> 
  rowwise() |> 
  mutate(f = list(rlang::parse_expr(first) |> eval()))
```

- Part Two



