---
title: "04"
format: html
---


```{r}
#| label: setup
#| include: false
library(tidyverse)
library(data.table)
```

- Part One

```
                [B]     [L]     [S]
        [Q] [J] [C]     [W]     [F]
    [F] [T] [B] [D]     [P]     [P]
    [S] [J] [Z] [T]     [B] [C] [H]
    [L] [H] [H] [Z] [G] [Z] [G] [R]
[R] [H] [D] [R] [F] [C] [V] [Q] [T]
[C] [J] [M] [G] [P] [H] [N] [J] [D]
[H] [B] [R] [S] [R] [T] [S] [R] [L]
```


```{r}
read_fwf("input/05",
         fwf_widths(c(1,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,2)),
         show_col_types = FALSE,
         n_max = 8) -> stacks_fwf
stacks_fwf[, seq_along(stacks_fwf) %% 2 == 0] |> 
  as.list() -> stacks

read_table("input/05", skip = 9, col_names = FALSE, show_col_types = FALSE) |> 
  select(where(is.numeric)) |> 
  rename(crate = X2, from = X4, to = X6) -> motions

```


```{r}
move_stacks <- function(part) {
  for (i in seq_len(nrow(motions))) {
    c1max <- sum(!is.na(stacks[[motions$from[i]]]))
    lg1   <- length(stacks[[motions$from[i]]])
    dif <- lg1 - c1max
    c2max <- sum(!is.na(stacks[[motions$to[i]]])) 
    lg2   <- length(stacks[[motions$to[i]]])
    # When crate is empty, do not pile NA
    if (c2max > 0L) {
      from_crate <- stacks[[motions$to[i]]][(lg2 - c2max + 1):lg2]
    } else {
      from_crate <- character(0)
    }
    # Destination gets pilled up
    # rev for part 1
    if (part == 1) {
      #message(paste("Part", part))
      stacks[[motions$to[i]]] <- c(rev(stacks[[motions$from[i]]][(1 + dif):(dif + motions$crate[i])]), # reverse order of origin 
                                   from_crate)
    } else {
      #message("Part Two")
      stacks[[motions$to[i]]] <- c(stacks[[motions$from[i]]][(1 + dif):(dif + motions$crate[i])],
                                   from_crate)
    }
    # Origin updated, remove moved
    stacks[[motions$from[i]]][1:(dif + motions$crate[i])] <- NA
    #message(paste("mvs:", i,  "max1", c1max, "lg1", lg1, "dif", dif,  "\nmax2", c2max, "lg2", lg2))
  }
  stacks
}



print_top_crate <- function(l) {
  # drop NA
  map(l, \(x) x[!is.na(x)]) |> 
    # get entry
    map_chr(\(x) x[1]) |> 
    paste(collapse = "")
}

move_stacks(part = 1) |> 
  print_top_crate()
```



- Part Two

```{r}
move_stacks(part = 2) |> 
  print_top_crate()
```


